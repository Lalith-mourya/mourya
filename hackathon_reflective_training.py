# -*- coding: utf-8 -*-
"""hackathon-reflective-training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18GXQ-MeWQTVYISRbOJBJ2vYES64c2DYu
"""

! pip install kaggle

# configuring the path of Kaggle.json file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

import kagglehub

# Download latest version
path = kagglehub.dataset_download("kazanova/sentiment140")

print("Path to dataset files:", path)

from zipfile import ZipFile
dataset='/content/archive.zip'
with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('the data is extracted')

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

twitter_data=pd.read_csv('/content/training.1600000.processed.noemoticon.csv',encoding ='ISO.8859-1')

twitter_data.shape

twitter_data.head()

column_names=['target','id','data','flag','user','text']
twitter_data=pd.read_csv('/content/training.1600000.processed.noemoticon.csv',names=column_names, encoding ='ISO.8859-1')

twitter_data.shape

twitter_data.head()

twitter_data.isnull().sum()

twitter_data['target'].value_counts()

twitter_data.replace({'target':{0:"negative"}}, inplace=True)
twitter_data.replace({'target':{1:"positive"}}, inplace=True)

twitter_data['target'].value_counts()

port_stem=PorterStemmer()

def stemming(content):
  stemmed_content=re.sub('[^a-zA-Z]',' ',content)
  stemmed_content= stemmed_content.lower()
  stemmed_content= stemmed_content.split()
  stemmed_content=[port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content=' '.join(stemmed_content)
  return stemmed_content

twitter_data['stemmed_content']=twitter_data['text'].apply(stemming)

twitter_data.head()

print(twitter_data['target'])

X=twitter_data['stemmed_content'].values
Y=twitter_data['target'].values

print(X,Y)

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

vectorizer = TfidfVectorizer()
X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

model=LogisticRegression(max_iter=1000)

model.fit(X_train,Y_train)

X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(Y_train,X_train_prediction)

print("accuracy of the training data:",training_data_accuracy)

X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(Y_test,X_test_prediction)

print("accuracy of the test data:",test_data_accuracy)

import pickle

filename='trained_model.sav'
pickle.dump(model,open(filename,'wb'))
pickle.dump(vectorizer, open('vectorizer.sav', 'wb'))